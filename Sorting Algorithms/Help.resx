<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lbHelp.Text" xml:space="preserve">
    <value>Chương trình thực hiện sắp xếp một dãy số do người dùng tự định nghĩa hoặc khởi tạo ngẫu nhiên.
❶ Chọn phương thức cần khởi tạo:  'Ngẫu nhiên', 'Nhập từ bàn phím' hoặc 'Nhập từ tệp'.
Nếu phương thức khởi tạo là 'Ngẫu nhiên', cần nhập số phần tử khởi tạo (tối đa 30 phần tử, các phần tử được khởi tạo có giá trị trong khoảng -200 đến 200).
Nếu phương thức khởi tạo là 'Nhập từ bàn phím', cần nhập dãy số cần sắp xếp vào khung phía dưới.
Nếu phương thức khởi tạo là 'Nhập từ tệp', cần dẫn đến tập tin chứa dãy số cần sắp xếp.
 Sau đó nhấn nút 'Khởi tạo' (đối với khởi tạo 'Ngẫu nhiên' hoặc 'Nhập từ bàn phím'). Nếu phương thức khởi tạo là 'Nhập từ tệp', các phần tử sẽ được nạp tự động mà không cần nhấn nút 'Khởi tạo'.
❷ Chọn thuật toán sử dụng để sắp xếp dãy số, bao gồm 7 thuật toán đã được cài đặt sẵn:
 Interchange sort, Bubble sort, Selection sort, Heap sort, Merge sort, Quick sort, Insertion sort. Sau đó, nhấn nút 'Chạy chương trình'.
• Một số lưu ý:
- Chưa thể nạp vào tệp có số âm (chương trình báo lỗi 'Dãy nhập vào chứa ký tự không hợp lệ!').
- Khuyến khích nhấn 'Khôi phục mặc định' mỗi khi thực hiện một lần sắp xếp mới để tránh các lỗi phát sinh.
- Nếu phương thức khởi tạo là 'Nhập từ bàn phím' hoặc 'Nhập từ tệp', giữa các phần tử cần được phân biệt với nhau bởi dấu cách.
- Thuật toán Quick sort và Merge sort không xuất ra kết quả chạy từng bước (có thể sẽ được khắc phục trong phiên bản sau).
- Số phần tử khởi tạo tối đa là 30, giá trị của các phần tử nếu được khởi tạo ngẫu nhiên nằm trong khoảng -200 đến 200.
- Để đưa các thuộc tính về ban đầu, nhấn nút 'Khôi phục mặc định'.</value>
  </data>
</root>